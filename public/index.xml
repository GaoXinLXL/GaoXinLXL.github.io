<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Classic</title>
    <link>https://gaoxinlxl.github.io/</link>
    <description>Recent content in Home on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://gaoxinlxl.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>译_Kafka - difference between Log end offset(LEO) vs High Watermark(HW)</title>
      <link>https://gaoxinlxl.github.io/post/2023/03/01/%E8%AF%91_kafka-difference-between-log-end-offsetleo-vs-high-watermarkhw/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2023/03/01/%E8%AF%91_kafka-difference-between-log-end-offsetleo-vs-high-watermarkhw/</guid>
      <description>原文链接：https://stackoverflow.com/questions/39203215/kafka-difference-between-log-end-offsetleo-vs-high-watermarkhw 这里简单翻译一下其中一个回答。
让我们从Google上能够找到的一个最流行的watermark定义开始吧。
“HW就是被成功复制到所有日志副本的那个最后一个消息的位移。”
对于上述定义我是不太信服的，经过更深层次的探索，我发现了如下图片：
这出现了什么问题？图片最右边的stuck follower 并没有收到第4条消息。也许在google找到的第一个定义并不完备，作者想表达的实际意图是：“HW是被成功复制到所有ISR的最后一条消息的位移”。
在本能指引下，我发现了这篇文章，提供了watermark 在代码中如何被计算的细节。
我发现文章中的watermark 被定义的更加精确：
“HW被计算为分区ISR中的最小LEO，以及它是单调递增的。”
这个回答及附带的代码印证了我的直觉。
总的来说，我认为watermark 的细节定义展现了LEO和WH的区别。最后提交的位移和LEO在ISR-Fellow中可能重合，但就像第一个链接的图片所示，对Leader来说可能并非如此。</description>
    </item>
    
    <item>
      <title>译_Kafka Consumer Auto Offset Reset</title>
      <link>https://gaoxinlxl.github.io/post/2023/02/23/%E8%AF%91_kafka-consumer-auto-offset-reset/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2023/02/23/%E8%AF%91_kafka-consumer-auto-offset-reset/</guid>
      <description> 原文：https://www.lydtechconsulting.com/blog-kafka-auto-offset-reset.html
引言 当没有初始化的位移（offset）时，这个auto.offset.reset 配置定义了一个消费者（consumer）在某个主题（topic）的分区（partition）消费时，该如何去消费。当一个新的消费者组被定义并且首次监听某个主题时，我们通常会关注到这个配置。这个配置将会告诉组内的消费者们是从分区的开头还是结尾读取。
消费消息 每个 Kafka 消费者都属于一个消费者组（consumer group），由消费者的 group.id 配置分组在一起。一个消费者组将包含一个或多个消费者。消费者组中的消费者将被分配到主题分区以消费他们的消息。每个分区将只有一个消费者分配给它，尽管一个消费者可以分配给任意一个主题中的多个分区，并且类似地分配给它订阅的所有主题中的分区。
当一个新的消费者组首次被创建以及组内消费者被分配到主题分区时，它们必须被指定从哪里开始轮询（polling）消息。除非已经被告知从某个具体的位移开始轮询（一般不常见），否则有两种主要方式去指定。第一种方式，从分区最开始处开始读取消息，处理分区日志中存在的每一条信息。第二种方式，当消费者开始监听时，仅仅读取最新写入的信息。
配置 当消费者组没有初始化位移时，到底是从分区开头读取信息还是仅仅处理最新消息，这个选择由消费端的auto.offset.reset 配置决定。下表展示了该配置的取值情况。
Value Usage earliest 重置位移到最开始处，从分区最开始处消费。 latest 重置位移到最新位置，从分区尾部开始消费（默认）。 none 如果消费者组中无位移，则抛出异常 一旦消费者组写入了位移，则该配置不再生效。如果消费者组中的消费者被停止然后重新启动，他们将从最后一个偏移量开始消费。
Earliest的作用 将新消费者配置为auto.offset.reset: earliest 将导致它消费分区上的所有内容。在以下示例中，分区有两条消息“foo”和“bar”，这些消息将被使用：
当然，分区上可能包含数百万条信息，所有要确保明白数据量以及系统不被压垮。这些消息可以追溯到数周或数月之前，也可以追溯到系统的开始，具体取决于主题的保留期限。retention.ms 设置为 -1 意味着不会丢弃任何旧消息，因此将轮询所有消息。
Latest的作用 将新消费者配置为 auto.offset.reset: latest 将导致它仅消费写入分区的新消息。在上述场景中，仅会消费偏移量 (3) 的新消息。已经存在的消息“foo”和“bar”将会被跳过。
消费者是否应该配置为跳过现有消息应然取决于需求。
数据丢失风险 存在一种极端场景会导致数据的丢失，导致在可重试的异常情况下不会重新传递消息。此场景适用于尚未记录任何当前偏移量（或偏移量已被删除）的新消费者组。
两个消费者实例 A 和 B 加入一个新的消费者组。 消费者实例配置为auto.offset.reset:latest（即仅限新消息）。 消费者 A 从主题分区中消费一条新消息。 消费者 A 在消息处理完成之前死亡。标记消息被消费的消费者位移没有被更新。 消费者组再平衡（rebalances），消费者B被分配到主题分区。 由于没有有效位移，以及auto.offset.reset 设置的是latest ，这个消息是不会被消费的。 由于A已经读到了消息，因此期望在失败的情况下，这个消息能够重新分发给下一个该分区上的消费者。然而在该场景下，数据却实际上丢失了。
结论 消费者首次监听分区时，能够被配置为消费所以信息还是只消费新的信息。采取何种设置应取决于应用需求。如果要消费所以信息，则要考虑数据量以及处理这些数据要耗费的资源的影响。
参考资料
https://www.lydtechconsulting.com/blog-kafka-auto-offset-reset.html https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html#auto.offset.reset </description>
    </item>
    
    <item>
      <title>logback日志配置&#43;docker挂载</title>
      <link>https://gaoxinlxl.github.io/post/2023/02/16/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE-docker%E6%8C%82%E8%BD%BD/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2023/02/16/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE-docker%E6%8C%82%E8%BD%BD/</guid>
      <description>背景：日志配置文件logback-spring.xml 、线上docker 部署 需求：日志能够在linux机器指定路径上查阅
1.日志文件配置 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;property name=&amp;#34;CONSOLE_LOG_PATTERN&amp;#34; value=&amp;#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %5p --- [%15.15t] %-80.80logger{79} [%line] : %m%n&amp;#34;/&amp;gt; &amp;lt;appender name=&amp;#34;CONSOLE&amp;#34; class=&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&amp;gt; &amp;lt;filter class=&amp;#34;ch.qos.logback.classic.filter.ThresholdFilter&amp;#34;&amp;gt; &amp;lt;level&amp;gt;debug&amp;lt;/level&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;encoder&amp;gt; &amp;lt;Pattern&amp;gt;${CONSOLE_LOG_PATTERN}&amp;lt;/Pattern&amp;gt; &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;appender name=&amp;#34;INFO_FILE&amp;#34; class=&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&amp;gt; &amp;lt;file&amp;gt;/home/data/app/plg/log/spring.log&amp;lt;/file&amp;gt; &amp;lt;encoder&amp;gt; &amp;lt;pattern&amp;gt;${CONSOLE_LOG_PATTERN}&amp;lt;/pattern&amp;gt; &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt; &amp;lt;!-- 设置字符集 --&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;rollingPolicy class=&amp;#34;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;#34;&amp;gt; &amp;lt;fileNamePattern&amp;gt;/home/data/app/plg/log/spring.log.%d{yyyy-MM-dd}.%i.gz&amp;lt;/fileNamePattern&amp;gt; &amp;lt;maxFileSize&amp;gt;800MB&amp;lt;/maxFileSize&amp;gt; &amp;lt;maxHistory&amp;gt;10&amp;lt;/maxHistory&amp;gt; &amp;lt;totalSizeCap&amp;gt;30GB&amp;lt;/totalSizeCap&amp;gt; &amp;lt;/rollingPolicy&amp;gt; &amp;lt;filter class=&amp;#34;ch.qos.logback.classic.filter.LevelFilter&amp;#34;&amp;gt; &amp;lt;level&amp;gt;INFO&amp;lt;/level&amp;gt; &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt; &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;root level=&amp;#34;INFO&amp;#34;&amp;gt; &amp;lt;appender-ref ref=&amp;#34;INFO_FILE&amp;#34;/&amp;gt; &amp;lt;appender-ref ref=&amp;#34;CONSOLE&amp;#34;/&amp;gt; &amp;lt;/root&amp;gt; &amp;lt;/configuration&amp;gt; 重点关注该配置：
&amp;lt;file&amp;gt;/home/data/app/plg/log/spring.log&amp;lt;/file&amp;gt; 指明了日志文件在服务器中的路径为/home/data/app/plg/log/spring.log 。但要注意，由于项目由docker部署，日志会保存在docker对应项目容器的该路径下，docker容器重启会丢失数据，所以需要需要将这部分信息持久化保存到服务器上。借助docker挂载完成日志文件的持久化。</description>
    </item>
    
    <item>
      <title>AbstractRoutingDataSource&#43;Mybatis拦截器实现动态切换数据源与切库</title>
      <link>https://gaoxinlxl.github.io/post/2023/02/14/abstractroutingdatasource-mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8E%E5%88%87%E5%BA%93/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2023/02/14/abstractroutingdatasource-mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8E%E5%88%87%E5%BA%93/</guid>
      <description>场景：线上4个MySQL实例分属4个机器，每个实例8个库。根据某一业务id，能够唯一确定数据存放在某个机器的某个库下。 要求：执行sql的时候，根据业务id切换数据源 工具：AbstractRoutingDataSource 切换数据源+Mybatis拦截器切换库
1.数据源配置 yml配置文件参考如下：
dlcms: dataSource: dlcms: url: jdbc:mysql://${MYSQL_URL_1}:${MYSQL_PORT}/dlcms?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&amp;amp;allowLoadLocalInfile=true&amp;amp;serverTimezone=Asia/Shanghai driver-class-name: com.mysql.cj.jdbc.Driver username: ${DB_USER} password: ${DB_PASSWORD} dlcms_01: url: jdbc:mysql://${MYSQL_URL_2}:${MYSQL_PORT}/dlcms_01?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&amp;amp;allowLoadLocalInfile=true&amp;amp;serverTimezone=Asia/Shanghai driver-class-name: com.mysql.cj.jdbc.Driver username: ${DB_USER} password: ${DB_PASSWORD} ...... MYSQL_URL_1、MYSQL_URL_2是不同的ip，表示MySQL分属不同机器。
2.读取数据源配置 @Component @ConfigurationProperties(prefix = &amp;#34;dlcms&amp;#34;) public class DlcmsDataSourceProfile { private Map&amp;lt;String, DataSourceProperties&amp;gt; datasource; public Map&amp;lt;String, DataSourceProperties&amp;gt; getDatasource() { return datasource; } public void setDatasource(Map&amp;lt;String, DataSourceProperties&amp;gt; datasource) { this.datasource = datasource; } } SpringBoot启动时会加载配置，将以dlcms 开头的配置存放进 datasource 同名Map&amp;lt;String, DataSourceProperties&amp;gt;集合
datasource集合的key就是配置里的dlcms、dlcms_01等，value就是数据源信息，包括url、账号密码等。
3.继承AbstractRoutingDataSource 重写determineCurrentLookupKey @Slf4j @Component public class DlcmsRoutingDataSource extends AbstractRoutingDataSource { public DlcmsRoutingDataSource(DlcmsDataSourceProfile profile) { Map&amp;lt;String, DataSourceProperties&amp;gt; datasource = profile.</description>
    </item>
    
    <item>
      <title>Flyway维护多数据源下的表</title>
      <link>https://gaoxinlxl.github.io/post/2022/02/15/flyway%E7%BB%B4%E6%8A%A4%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8B%E7%9A%84%E8%A1%A8/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2022/02/15/flyway%E7%BB%B4%E6%8A%A4%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8B%E7%9A%84%E8%A1%A8/</guid>
      <description>背景：新项目基于一个老项目进行，老项目是一个分库的项目（线上多个机器运行MySQL实例，每个实例有N个分库，数据按照一定规则分库存储）。新项目也是分库存储。 要求：方便地维护数据库。不同数据源的多个分库下有相同结构的表，更新其中一个表结构，其他数据源的不同分库下的该类表结构也会更新（业务限定了分库下的表结构一致）。 工具：Flyway
1.引入依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.flywaydb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flyway-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2.书写配置 spring: profiles: active: &amp;#39;@spring.profiles@&amp;#39; flyway: enabled: true baseline-on-migrate: true validate-on-migrate: false placeholderReplacement: false ignoreMissingMigrations: true locations: &amp;#34;classpath:db/dlcms&amp;#34;#由于线上是多源数据，代码启动时在FlywayConfig配置类中转换数据源 其中比较关键的配置是locations ，该路径下存放要执行的sql脚本。
3.SQL脚本存放 Flyway配置的SQL脚本存放位置是&amp;quot;classpath:db/dlcms&amp;quot; ，但实际上还可以根据业务需求存放到其他位置，便于管理。但要读取到其他地方的SQL文件，就需要自定义执行migrate() 。
4.执行migrate() 一般单数据源，不必自己去执行该方法，启动就会检查版本并执行locations配置的路径下的脚本。但在多数据源且存在分库的情况下，为了简化sql脚本需要手动执行migrate() ，便于管理。
利用SpringBoot的配置类，在项目启动的时候就运行该方法，等数据库更新完后，项目才能算启动成功。
配置类代码：
@Slf4j @Configuration public class FlywayConfig { @Resource private InstanceMapCache instanceMapCache; @Value(&amp;#34;${spring.flyway.locations}&amp;#34;) private String dlcms; @Value(&amp;#34;${spring.flyway.baseline-on-migrate}&amp;#34;) private boolean baselineOnMigrate; @Value(&amp;#34;${spring.flyway.validate-on-migrate}&amp;#34;) private boolean validateOnMigrate; @Value(&amp;#34;${spring.flyway.placeholderReplacement}&amp;#34;) private boolean placeholderReplacement; @Value(&amp;#34;${spring.flyway.ignoreMissingMigrations}&amp;#34;) private boolean ignoreMissingMigrations; @Value(&amp;#34;${flyway.instance1}&amp;#34;) private String instanceList1; @Value(&amp;#34;${flyway.</description>
    </item>
    
    <item>
      <title>Hadoop之WordCount&#43;InvertedIndex&#43;PageRank&#43;DataDeduplication&#43;TopN</title>
      <link>https://gaoxinlxl.github.io/post/2020/05/25/hadoop%E4%B9%8Bwordcount-invertedindex-pagerank-datadeduplication-topn/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2020/05/25/hadoop%E4%B9%8Bwordcount-invertedindex-pagerank-datadeduplication-topn/</guid>
      <description>WordCount（词频统计）就像是编程世界的Hello World程序，新手必备。另外几个经典的算法：倒排索引、页面排序、数据去重、TopN等一并记录如下。
WordCount 词频统计是MapRedurce编程的一个经典案例
继承Mapper类 public class WordCountMapper extends Mapper&amp;lt;LongWritable, Text,Text, IntWritable&amp;gt;{ Text k = new Text(); IntWritable v = new IntWritable(1); @Override protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException { String line = value.toString(); String[] words = line.split(&amp;#34; &amp;#34;); for(String word : words){ k.set(word); context.write(k,v); } } } 继承Reducer类 public class WordCountReducer extends Reducer&amp;lt;Text, IntWritable,Text,IntWritable&amp;gt; { IntWritable v = new IntWritable(); @Override protected void reduce(Text key, Iterable&amp;lt;IntWritable&amp;gt; values, Context context) throws IOException, InterruptedException { //局部汇总 int count = 0; for(IntWritable value : values){ count += value.</description>
    </item>
    
    <item>
      <title>代理模式学习</title>
      <link>https://gaoxinlxl.github.io/post/2020/03/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2020/03/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</guid>
      <description>静态代理 创建接口
创建被代理类
实现接口
创建代理类
也要实现同样的接口，同时还要持有被代理对象的引用
代理类发挥作用
代理类执行方法（其实真正执行的核心方法是被代理类的方法）
interface Print{//接口 public void print(); } class Printer implements Print{//被代理类 @Override public void print() { System.out.println(&amp;#34;打印中。。。&amp;#34;); } } class ProxyPrinter implements Print{//代理类 private Printer printer;//要得到被代理类的引用 ProxyPrinter(Printer printer) { this.printer = printer; } @Override public void print() { System.out.println(&amp;#34;打印前。。。&amp;#34;); printer.print();//调用被代理类的方法 System.out.println(&amp;#34;打印后。。。&amp;#34;); } } public class Main { public static void main(String[] args){ Print p = new ProxyPrinter(new Printer());//这里用了向上转型 p.print(); } } 打印前。。。 打印中。。。 打印后。。。 动态代理 和静态代理相比，创建接口、创建真实的被代理类都不变。</description>
    </item>
    
    <item>
      <title>MPI并行计算学习</title>
      <link>https://gaoxinlxl.github.io/post/2020/02/21/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2020/02/21/mpi%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%AD%A6%E4%B9%A0/</guid>
      <description>并行计算（Parallel Computing）是指同时使用多种计算资源解决计算问题的过程，是提高计算机系统计算速度和处理能力的一种有效手段。它的基本思想是用多个处理器来协同求解同一问题，即将被求解的问题分解成若干个部分，各部分均由一个独立的处理机来并行计算。
在win+vs上运行MPI指令 配置就不记录了，网上有很多。
win+vs+MPI，不能像常规程序一样直接运行。
先在vs里写好代码 重新生成项目 找到项目名.exe所在文件夹 Shift+鼠标右键，打开Powershell窗口 输入命令（比如）： mpiexec -n 10 HelloWord_MPI.exe 注意：
mpiexec是运行MPI并行程序的指令，基本格式为
mpiexec -n N ./xxxxxx
其中N是并行进程数，xxxxxx是并行程序名称。
MPI MPI是一个跨语言的通讯协议，用于编写并行计算机。
6个基本函数 理论上讲 MPI 的所有通信功能都可以使用它的6个基本函数来实现。
//初始化 MPI_Init(int *argc,char ***argv) //MPI 结束调用 MPI_Finalize(void) /* *获得进程的标识号 *保存在rank里 */ MPI_Comm_rank(MPI_Comm comm,int *rank) /* *获得当前通信域中进程的个数 *保存在size里 */ MPI_Comm_size(MPI_Comm comm,int *size) //发送消息 MPI_Send(Void *buf,int count,MPI_Datatype,int dest,int tag,MPI_Comm comm) //接受消息 MPI_Recv(void *buf,int count,MPI_Datatype data,int source,int tag,MPI_Comm comm,MPI_Status *status) 消息传递 MPI 通过 MPI_Send 和 MPI_Receive 发送和接受消息。其中这两种属于阻塞通信，对于发送方来说，消息发送不出去就会一直等待，而对于接收方来说，接收不到消息就会一直等待。</description>
    </item>
    
    <item>
      <title>PointNet阅读笔记</title>
      <link>https://gaoxinlxl.github.io/post/2019/11/11/pointnet%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2019/11/11/pointnet%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>论文链接：http://stanford.edu/~rqi/pointnet/
项目地址：https://github.com/charlesq34/pointnet
点云3大特征问题 无序性：点云数据是一个集合，对数据的输入顺序是不敏感的。
点与点之间的空间关系
不变性：点云整体空间变换不改变性质，例如旋转和平移。
PointNet模型 输入为一帧的全部点云数据的集合，表示为一个nx3的2d tensor，其中n代表点云数量，3对应xyz坐标。 输入数据先通过一个 T-Net学习到的转换矩阵相乘来对齐，保证了模型对特定空间转换的不变性。 通过多次mlp对各点云数据进行特征提取后，再用一个T-Net对特征进行对齐，之后再进行mpl。 在特征的各个维度上执行maxpooling操作来得到最终的全局特征。 对分类任务，将全局特征通过mpl来预测最后的分类分数；对分割任务，将全局特征和之前学习到的各点云的局部特征进行串联，再通过mlp得到每个数据点的分类结果。 解决三大特性问题 max-pooling：作为对称函数来解决无序性
将局部特征和全局特征进行串联来聚合信息
两个联合的对齐网络，用来对齐输入的点和点特征来解决不变性
分类网络 第一个变换网络输入未处理的点云，输出回归3x3矩阵 第二个变换网络输出64x64矩阵 注意：这里的变换网络就是T-Net 分割网络 分割网络是分类网络的一个延伸
局部点特征（应用第二个变换网络后的结果）和全局特征（max-pooling的输出）按每个点级联。
一些概念 有多少个卷积核，就有多少个feature map
池化也叫下采样（池化作用：减少参数量，防止过拟合，为卷积神经网络带来平移不变性）
激活函数多用ReLu函数（不再是Sigmoid、tanh激活函数，会造成梯度消失）</description>
    </item>
    
    <item>
      <title>Hexo体验</title>
      <link>https://gaoxinlxl.github.io/post/2019/11/04/hexo%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2019/11/04/hexo%E4%BD%93%E9%AA%8C/</guid>
      <description>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。
Markdown常用语法 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。
标题 通过#来设置，不同数量的#代表不同等级的标题
例：
# 一级标题## 二级标题### 三级标题 字体 加粗，左右分别用**包裹
斜体，左右分别用*包裹
删除线，左右分别用~~包裹
例：
**hello world***hello world*~~hello world~~ 效果：
hello world
hello world
hello world
引用 在被引语句前加&amp;gt;即可
例：
&amp;gt;我一直急速前行，穿梭于人人之间，试图借应接不暇的风景让我褪去对你的思念 我一直急速前行，穿梭于人人之间，试图借应接不暇的风景让我褪去对你的思念
分割线 三个或三个以上的-或*就行
例：
--- *************** 图片 语法：
![图片alt](url) 例：
![紫色韵味](https://i.loli.net/2019/11/04/gR9Xdwo2JLETxIn.jpg) 注意：所要插入图片的地址来源，建议采用图床方式（下文介绍）。
超链接 语法：
[title](url)title可加可不加 例：
[百度](https://www.baidu.com/) 效果：
百度
列表 无序列表，- 空格内容 有序列表，数字. 空格 内容 例：
- 嗯- 啊 1.嗯2.</description>
    </item>
    
    <item>
      <title>MATLAB学习</title>
      <link>https://gaoxinlxl.github.io/post/2019/09/19/matlab%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2019/09/19/matlab%E5%AD%A6%E4%B9%A0/</guid>
      <description>MATLAB的名称源自Matrix Laboratory，它是一种科学计算软件，专门以矩阵的形式处理数据。
大二测绘系开设过matlab课程，除了认真上过第一节课，就再也没学了，哪怕是最后的期末作业，都是抄的。当然也就完全体会不到matlab的用处，对它的认识仅仅停留在“matlab”的六个字母上。三年后（2019-9-19），体验了下数学建模，负责编程任务，又重新学习了一下matlab的基本语法。
基本操作 clear y 将变量y从变量空间中去掉 clear 将所有变量清空 clc 仅仅是清空屏幕 % 注释 ctrl+R 批量注释 ctrl+T 批量取消注释 disp（）：屏幕打印 input（）：输入函数 strcat（）：合并字符串 num2str（）：数字-&amp;gt;字符串 linspace(0,2,5) 产生从0到2的均匀的5个点 zeros(2,3) 初始化2行3列全为0的矩阵 ones(2) 初始化全为1的2阶的矩阵 eye(2) 初始化2阶单位阵 Inf 无穷大 F = A.*B 点乘，对应位置相乘，区别于矩阵乘法 F = A./B 点除，对应位置相除 F = A/B = A * B^-1 ，就是A*B的逆 F = A^2 = A*A F = A.^2 = A.*A x = A(1,3) 取A矩阵的第1行3列 y = A(2,:) 相当于 y = A(2,1:3) 取第二行 Z = A(1:2,1:3) 前2行前3列 A([2,5],:) 只取第2和第5行 10👎1 从10到1，公差为-1 A(2:end,:) 取第2行到最后一行 A(2:end-1,:) 取第2行到倒数第2行 A(:) 取全部元素，输出的是一个列向量 A(1,3) = 0 将0赋值给1行3列 A(2,:) = [6 5 4] 整行的赋值 size（）：求矩阵的大小，几行几列 [r,c] = size(A) 将A的行、列数分别赋值给r、c r = size(A,1) 只返回行数 c = size(A,2) 只返回列数 B = repmat(A,m,n) 将A复制m*n块 inv(B) 求B的逆矩阵 prod(A) 按列相乘 prod(A,2) 按行相乘 E = eig(A) A的全部特征值，组成向量E [V,D] = eig(A) A的全部特征值，构成对角阵D，且A的特征值构成V的列向量 比较和逻辑运算 &amp;gt;&amp;gt; x = [1 2 3 4 5 6 7 8 9]; &amp;gt;&amp;gt; y = [1 4 3 8 6 5 7 2 9]; &amp;gt;&amp;gt; eq = (x==y) eq = 1×9 logical 数组 1 0 1 0 0 0 1 0 1 &amp;gt;&amp;gt; xy = (x&amp;gt;5)&amp;amp;(y&amp;lt;7) xy = 1×9 logical 数组 0 0 0 0 0 1 0 1 0 &amp;gt;&amp;gt; xoy = (x&amp;gt;5)|(y&amp;lt;7) xoy = 1×9 logical 数组 1 1 1 0 1 1 1 1 1 % 把x里小于0的都改为0，省的写for循环 &amp;gt;&amp;gt; x = [1 -2 3 -4 5 -6 7 -8 9]; &amp;gt;&amp;gt; x(x&amp;lt;0) = 0 x = 1 0 3 0 5 0 7 0 9 % 第2行赋值为0 y = 1 2 3 -4 5 6 7 8 9 &amp;gt;&amp;gt; y(2,:)=0 y = 1 2 3 0 0 0 7 8 9 % 先找到第一列中小于0的，再把那一行都设为0 &amp;gt;&amp;gt; y = [1 2 3;-4 5 6;7 8 9] y = 1 2 3 -4 5 6 7 8 9 &amp;gt;&amp;gt; y(y(:,1)&amp;lt;0,:)=0 y = 1 2 3 0 0 0 7 8 9 数组操作函数 flipud（）：行逆序排列 fliplr（）：列逆序排列 rot90（）：逆时针90°旋转 &amp;gt;&amp;gt; A = [1 2 3;4 5 6;7 8 9] A = 1 2 3 4 5 6 7 8 9 &amp;gt;&amp;gt; B = flipud(A) B = 7 8 9 4 5 6 1 2 3 &amp;gt;&amp;gt; C = fliplr(A) C = 3 2 1 6 5 4 9 8 7 &amp;gt;&amp;gt; D = rot90(A) D = 3 6 9 2 5 8 1 4 7 sum（）：求和函数 &amp;gt;&amp;gt; A = [1 2 3]; &amp;gt;&amp;gt; sum(A) ans = 6 &amp;gt;&amp;gt; B = [1 2 3;4 5 6;7 8 9]; &amp;gt;&amp;gt; sum(B) % 相当于sum（B，1）,每列求和 ans = 12 15 18 &amp;gt;&amp;gt; sum(B,2) % 每行求和 ans = 6 15 24 &amp;gt;&amp;gt; sum(B(:)) % 所有总和 ans = 45 &amp;gt;&amp;gt; C = B(:) % 将B矩阵拉成1维向量 C = 1 4 7 2 5 8 3 6 9 &amp;gt;&amp;gt; A = [1 2 3]; &amp;gt;&amp;gt; max(A) ans = 3 &amp;gt;&amp;gt; max(A,2) % 跟2比较，取最大 ans = 2 2 3 &amp;gt;&amp;gt; B = [1 3 9;4 8 6]; % 2维数组取最大，默认取每列最大 &amp;gt;&amp;gt; max(B) ans = 4 8 9 &amp;gt;&amp;gt; max(B,[],2) % 按照行取最大值的格式 ans = 9 8 常用数学函数 sin,cos,tan,cot,asin,acos,atan,acot &amp;gt;&amp;gt; x = 0:pi/6:pi x = 0 0.</description>
    </item>
    
    <item>
      <title>Spire.Doc在Word上的简单应用</title>
      <link>https://gaoxinlxl.github.io/post/2019/09/12/spire.doc%E5%9C%A8word%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2019/09/12/spire.doc%E5%9C%A8word%E4%B8%8A%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</guid>
      <description>一位同学让帮忙做个小功能：提前在word上建立模板，程序运行后直接输出到对应位置，避免手动输入数据。
效果如下 程序使用前须知 提前建立两个word文件，其中一个作为模板，另一个作为结果展示文件
模板里面可以绘制表格，表格中对结果部分使用占位符，如图所示：
在程序运行后，另一个word就会展示如上面结果展示中的结果
还有很多对word的操作，可自行网上搜索Spire
准备操作 工具 C# Spire.Doc for .NET Spire简介 Spire.Doc for .NET是一款由E-iceblue公司开发的专业的Word .NET类库，使用该工具开发人员可以在任意.NET平台（C#，VB.NET，ASP.NET）上快速创建，读取，写入，转换，打印Word文档。
简而言之，利用Spire来快速实现需求
那Spire从官网下载速度有点慢
Spire的具体使用 在解决方案资源管理器里，引用添加就行
然后在代码开头引入命名空间就完成准备工作了
代码实现 搞个button来写
搞个例子试试：
using Spire.Doc; using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace WindowsFormsApplication1 { public partial class Form1 : Form { public Form1() { InitializeComponent(); } private void button1_Click(object sender, EventArgs e) { int i = 2; double a, b, x,y; a = 1.</description>
    </item>
    
    <item>
      <title>Markdown Guide (modified)</title>
      <link>https://gaoxinlxl.github.io/post/2018/08/30/markdown-guide-modified/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2018/08/30/markdown-guide-modified/</guid>
      <description>An h1 header Paragraphs are separated by a blank line.
2nd paragraph. Italic, bold, and monospace. Itemized lists look like:
this one that one the other one Note that &amp;mdash; not considering the asterisk &amp;mdash; the actual text content starts at 4-columns in.
Block quotes are written like so.
They can span multiple paragraphs, if you like.
Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &amp;ldquo;it&amp;rsquo;s all in chapters 12&amp;ndash;14&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>利用数组建链表</title>
      <link>https://gaoxinlxl.github.io/post/2018/04/19/%E5%88%A9%E7%94%A8%E6%95%B0%E7%BB%84%E5%BB%BA%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2018/04/19/%E5%88%A9%E7%94%A8%E6%95%B0%E7%BB%84%E5%BB%BA%E9%93%BE%E8%A1%A8/</guid>
      <description>#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt;//这句写上，因为结点空间申请函数malloc()要用此 typedef struct Node{//链表结点定义 int data;//放数据信息 struct Node *next;//指向后继结点的指针 }Node; Node *head(int a[]){//此方法利用数组建链表（尾插法） ，并返回头指针L Node *L, *current,*p;//L是头指针，current是当前结点指针，p是每次新申请结点的指针 L = (Node*)malloc(sizeof(Node));//先给头结点申请个空间 current = L; L-&amp;gt;next = NULL; int i=0; while(a[i]!=&amp;#39;\0&amp;#39;){//只要没将数组元素读完，就继续循环 p = (Node*)malloc(sizeof(Node));//每次读一个数组中的数，都要申请一个节点空间 p-&amp;gt;data = a[i];//将读到的数组中的数字赋给刚申请结点的数据域 current-&amp;gt;next = p; current = p; ++i; } current-&amp;gt;next = NULL; return L; } int main(void){ int x[1024]={1,2,3,6,6,6};//随便建个数组 Node *L,*p; L = head(x);//用数组中的元素建链表，并得到链表头指针 p = L-&amp;gt;next;//从开始结点的信息开始打印 while(p!=NULL){//验证一下打印出来的数是不是数组中的数 printf(&amp;#34;%d\n&amp;#34;,p-&amp;gt;data); p = p-&amp;gt;next; } return 0; } 运行效果如下：</description>
    </item>
    
    <item>
      <title>Hacker with Bullhorn</title>
      <link>https://gaoxinlxl.github.io/post/2012/04/23/hacker-with-horn/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2012/04/23/hacker-with-horn/</guid>
      <description>Hacker with bullhorn: &amp;ldquo;Save your money! Accept one of our free tanks! It is invulnerable, and can drive across rocks and swamps at ninety miles an hour while getting a hundred miles to the gallon!&amp;rdquo;
Prospective station wagon buyer: &amp;ldquo;I know what you say is true&amp;hellip;but&amp;hellip;er&amp;hellip;I don&amp;rsquo;t know how to maintain a tank!&amp;rdquo;
Bullhorn: &amp;ldquo;You don&amp;rsquo;t know how to maintain a station wagon either!&amp;rdquo;
Buyer: &amp;ldquo;But this dealership has mechanics on staff.</description>
    </item>
    
    <item>
      <title>Command Line Awesomeness</title>
      <link>https://gaoxinlxl.github.io/post/2012/03/12/command-line-awesomeness/</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2012/03/12/command-line-awesomeness/</guid>
      <description>This crud is called HTML (HyperText Markup Language) and it is basically a very simple programming language instructing your web browser how to draw a page on a screen. Anyone can learn HTML and many people do. The important thing is that no matter what splendid multimedia web pages they might represent, HTML files are just telegrams.
When Ronald Reagan was a radio announcer, he used to call baseball games by reading the terse descriptions that trickled in over the telegraph wire and were printed out on a paper tape.</description>
    </item>
    
    <item>
      <title>Juicy Code</title>
      <link>https://gaoxinlxl.github.io/post/2012/01/23/juicy-code/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2012/01/23/juicy-code/</guid>
      <description>Check out this JUICY! code:
def with_value_from_database(value) self.class.from_database(name, value, type) end def with_cast_value(value) self.class.with_cast_value(name, value, type) end def with_type(type) if changed_in_place? with_value_from_user(value).with_type(type) else self.class.new(name, value_before_type_cast, type, original_attribute) end end </description>
    </item>
    
  </channel>
</rss>
