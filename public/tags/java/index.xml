<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Classic</title>
    <link>https://gaoxinlxl.github.io/tags/java/</link>
    <description>Recent content in Java on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://gaoxinlxl.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>logback日志配置&#43;docker挂载</title>
      <link>https://gaoxinlxl.github.io/post/2023/02/16/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE-docker%E6%8C%82%E8%BD%BD/</link>
      <pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2023/02/16/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE-docker%E6%8C%82%E8%BD%BD/</guid>
      <description>背景：日志配置文件logback-spring.xml 、线上docker 部署 需求：日志能够在linux机器指定路径上查阅
1.日志文件配置 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;property name=&amp;#34;CONSOLE_LOG_PATTERN&amp;#34; value=&amp;#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %5p --- [%15.15t] %-80.80logger{79} [%line] : %m%n&amp;#34;/&amp;gt; &amp;lt;appender name=&amp;#34;CONSOLE&amp;#34; class=&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&amp;gt; &amp;lt;filter class=&amp;#34;ch.qos.logback.classic.filter.ThresholdFilter&amp;#34;&amp;gt; &amp;lt;level&amp;gt;debug&amp;lt;/level&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;encoder&amp;gt; &amp;lt;Pattern&amp;gt;${CONSOLE_LOG_PATTERN}&amp;lt;/Pattern&amp;gt; &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;appender name=&amp;#34;INFO_FILE&amp;#34; class=&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&amp;gt; &amp;lt;file&amp;gt;/home/data/app/plg/log/spring.log&amp;lt;/file&amp;gt; &amp;lt;encoder&amp;gt; &amp;lt;pattern&amp;gt;${CONSOLE_LOG_PATTERN}&amp;lt;/pattern&amp;gt; &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt; &amp;lt;!-- 设置字符集 --&amp;gt; &amp;lt;/encoder&amp;gt; &amp;lt;rollingPolicy class=&amp;#34;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;#34;&amp;gt; &amp;lt;fileNamePattern&amp;gt;/home/data/app/plg/log/spring.log.%d{yyyy-MM-dd}.%i.gz&amp;lt;/fileNamePattern&amp;gt; &amp;lt;maxFileSize&amp;gt;800MB&amp;lt;/maxFileSize&amp;gt; &amp;lt;maxHistory&amp;gt;10&amp;lt;/maxHistory&amp;gt; &amp;lt;totalSizeCap&amp;gt;30GB&amp;lt;/totalSizeCap&amp;gt; &amp;lt;/rollingPolicy&amp;gt; &amp;lt;filter class=&amp;#34;ch.qos.logback.classic.filter.LevelFilter&amp;#34;&amp;gt; &amp;lt;level&amp;gt;INFO&amp;lt;/level&amp;gt; &amp;lt;onMatch&amp;gt;ACCEPT&amp;lt;/onMatch&amp;gt; &amp;lt;onMismatch&amp;gt;DENY&amp;lt;/onMismatch&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;/appender&amp;gt; &amp;lt;root level=&amp;#34;INFO&amp;#34;&amp;gt; &amp;lt;appender-ref ref=&amp;#34;INFO_FILE&amp;#34;/&amp;gt; &amp;lt;appender-ref ref=&amp;#34;CONSOLE&amp;#34;/&amp;gt; &amp;lt;/root&amp;gt; &amp;lt;/configuration&amp;gt; 重点关注该配置：
&amp;lt;file&amp;gt;/home/data/app/plg/log/spring.log&amp;lt;/file&amp;gt; 指明了日志文件在服务器中的路径为/home/data/app/plg/log/spring.log 。但要注意，由于项目由docker部署，日志会保存在docker对应项目容器的该路径下，docker容器重启会丢失数据，所以需要需要将这部分信息持久化保存到服务器上。借助docker挂载完成日志文件的持久化。</description>
    </item>
    
    <item>
      <title>AbstractRoutingDataSource&#43;Mybatis拦截器实现动态切换数据源与切库</title>
      <link>https://gaoxinlxl.github.io/post/2023/02/14/abstractroutingdatasource-mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8E%E5%88%87%E5%BA%93/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2023/02/14/abstractroutingdatasource-mybatis%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8E%E5%88%87%E5%BA%93/</guid>
      <description>场景：线上4个MySQL实例分属4个机器，每个实例8个库。根据某一业务id，能够唯一确定数据存放在某个机器的某个库下。 要求：执行sql的时候，根据业务id切换数据源 工具：AbstractRoutingDataSource 切换数据源+Mybatis拦截器切换库
1.数据源配置 yml配置文件参考如下：
dlcms: dataSource: dlcms: url: jdbc:mysql://${MYSQL_URL_1}:${MYSQL_PORT}/dlcms?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&amp;amp;allowLoadLocalInfile=true&amp;amp;serverTimezone=Asia/Shanghai driver-class-name: com.mysql.cj.jdbc.Driver username: ${DB_USER} password: ${DB_PASSWORD} dlcms_01: url: jdbc:mysql://${MYSQL_URL_2}:${MYSQL_PORT}/dlcms_01?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&amp;amp;allowLoadLocalInfile=true&amp;amp;serverTimezone=Asia/Shanghai driver-class-name: com.mysql.cj.jdbc.Driver username: ${DB_USER} password: ${DB_PASSWORD} ...... MYSQL_URL_1、MYSQL_URL_2是不同的ip，表示MySQL分属不同机器。
2.读取数据源配置 @Component @ConfigurationProperties(prefix = &amp;#34;dlcms&amp;#34;) public class DlcmsDataSourceProfile { private Map&amp;lt;String, DataSourceProperties&amp;gt; datasource; public Map&amp;lt;String, DataSourceProperties&amp;gt; getDatasource() { return datasource; } public void setDatasource(Map&amp;lt;String, DataSourceProperties&amp;gt; datasource) { this.datasource = datasource; } } SpringBoot启动时会加载配置，将以dlcms 开头的配置存放进 datasource 同名Map&amp;lt;String, DataSourceProperties&amp;gt;集合
datasource集合的key就是配置里的dlcms、dlcms_01等，value就是数据源信息，包括url、账号密码等。
3.继承AbstractRoutingDataSource 重写determineCurrentLookupKey @Slf4j @Component public class DlcmsRoutingDataSource extends AbstractRoutingDataSource { public DlcmsRoutingDataSource(DlcmsDataSourceProfile profile) { Map&amp;lt;String, DataSourceProperties&amp;gt; datasource = profile.</description>
    </item>
    
    <item>
      <title>Flyway维护多数据源下的表</title>
      <link>https://gaoxinlxl.github.io/post/2022/02/15/flyway%E7%BB%B4%E6%8A%A4%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8B%E7%9A%84%E8%A1%A8/</link>
      <pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2022/02/15/flyway%E7%BB%B4%E6%8A%A4%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8B%E7%9A%84%E8%A1%A8/</guid>
      <description>背景：新项目基于一个老项目进行，老项目是一个分库的项目（线上多个机器运行MySQL实例，每个实例有N个分库，数据按照一定规则分库存储）。新项目也是分库存储。 要求：方便地维护数据库。不同数据源的多个分库下有相同结构的表，更新其中一个表结构，其他数据源的不同分库下的该类表结构也会更新（业务限定了分库下的表结构一致）。 工具：Flyway
1.引入依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.flywaydb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flyway-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2.书写配置 spring: profiles: active: &amp;#39;@spring.profiles@&amp;#39; flyway: enabled: true baseline-on-migrate: true validate-on-migrate: false placeholderReplacement: false ignoreMissingMigrations: true locations: &amp;#34;classpath:db/dlcms&amp;#34;#由于线上是多源数据，代码启动时在FlywayConfig配置类中转换数据源 其中比较关键的配置是locations ，该路径下存放要执行的sql脚本。
3.SQL脚本存放 Flyway配置的SQL脚本存放位置是&amp;quot;classpath:db/dlcms&amp;quot; ，但实际上还可以根据业务需求存放到其他位置，便于管理。但要读取到其他地方的SQL文件，就需要自定义执行migrate() 。
4.执行migrate() 一般单数据源，不必自己去执行该方法，启动就会检查版本并执行locations配置的路径下的脚本。但在多数据源且存在分库的情况下，为了简化sql脚本需要手动执行migrate() ，便于管理。
利用SpringBoot的配置类，在项目启动的时候就运行该方法，等数据库更新完后，项目才能算启动成功。
配置类代码：
@Slf4j @Configuration public class FlywayConfig { @Resource private InstanceMapCache instanceMapCache; @Value(&amp;#34;${spring.flyway.locations}&amp;#34;) private String dlcms; @Value(&amp;#34;${spring.flyway.baseline-on-migrate}&amp;#34;) private boolean baselineOnMigrate; @Value(&amp;#34;${spring.flyway.validate-on-migrate}&amp;#34;) private boolean validateOnMigrate; @Value(&amp;#34;${spring.flyway.placeholderReplacement}&amp;#34;) private boolean placeholderReplacement; @Value(&amp;#34;${spring.flyway.ignoreMissingMigrations}&amp;#34;) private boolean ignoreMissingMigrations; @Value(&amp;#34;${flyway.instance1}&amp;#34;) private String instanceList1; @Value(&amp;#34;${flyway.</description>
    </item>
    
    <item>
      <title>代理模式学习</title>
      <link>https://gaoxinlxl.github.io/post/2020/03/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoxinlxl.github.io/post/2020/03/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</guid>
      <description>静态代理 创建接口
创建被代理类
实现接口
创建代理类
也要实现同样的接口，同时还要持有被代理对象的引用
代理类发挥作用
代理类执行方法（其实真正执行的核心方法是被代理类的方法）
interface Print{//接口 public void print(); } class Printer implements Print{//被代理类 @Override public void print() { System.out.println(&amp;#34;打印中。。。&amp;#34;); } } class ProxyPrinter implements Print{//代理类 private Printer printer;//要得到被代理类的引用 ProxyPrinter(Printer printer) { this.printer = printer; } @Override public void print() { System.out.println(&amp;#34;打印前。。。&amp;#34;); printer.print();//调用被代理类的方法 System.out.println(&amp;#34;打印后。。。&amp;#34;); } } public class Main { public static void main(String[] args){ Print p = new ProxyPrinter(new Printer());//这里用了向上转型 p.print(); } } 打印前。。。 打印中。。。 打印后。。。 动态代理 和静态代理相比，创建接口、创建真实的被代理类都不变。</description>
    </item>
    
  </channel>
</rss>
